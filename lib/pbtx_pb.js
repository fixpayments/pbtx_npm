// source: pbtx/pbtx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.pbtx.Authority', null, global);
goog.exportSymbol('proto.pbtx.KeyType', null, global);
goog.exportSymbol('proto.pbtx.KeyWeight', null, global);
goog.exportSymbol('proto.pbtx.Permission', null, global);
goog.exportSymbol('proto.pbtx.PublicKey', null, global);
goog.exportSymbol('proto.pbtx.Transaction', null, global);
goog.exportSymbol('proto.pbtx.TransactionBody', null, global);
goog.exportSymbol('proto.pbtx.TransactionHistoryEntry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.TransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbtx.TransactionBody.repeatedFields_, null);
};
goog.inherits(proto.pbtx.TransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.TransactionBody.displayName = 'proto.pbtx.TransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbtx.Transaction.repeatedFields_, null);
};
goog.inherits(proto.pbtx.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.Transaction.displayName = 'proto.pbtx.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbtx.Permission.repeatedFields_, null);
};
goog.inherits(proto.pbtx.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.Permission.displayName = 'proto.pbtx.Permission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.KeyWeight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbtx.KeyWeight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.KeyWeight.displayName = 'proto.pbtx.KeyWeight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbtx.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.PublicKey.displayName = 'proto.pbtx.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.Authority = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pbtx.Authority.repeatedFields_, null);
};
goog.inherits(proto.pbtx.Authority, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.Authority.displayName = 'proto.pbtx.Authority';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pbtx.TransactionHistoryEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pbtx.TransactionHistoryEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pbtx.TransactionHistoryEntry.displayName = 'proto.pbtx.TransactionHistoryEntry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbtx.TransactionBody.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.TransactionBody.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.TransactionBody.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.TransactionBody} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.TransactionBody.toObject = function(includeInstance, msg) {
    var f, obj = {
      networkId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
      actor: jspb.Message.getFieldWithDefault(msg, 2, "0"),
      cosignorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
      seqnum: jspb.Message.getFieldWithDefault(msg, 4, 0),
      prevHash: jspb.Message.getFieldWithDefault(msg, 5, "0"),
      transactionType: jspb.Message.getFieldWithDefault(msg, 6, 0),
      transactionContent: msg.getTransactionContent_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.TransactionBody}
 */
proto.pbtx.TransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.TransactionBody;
  return proto.pbtx.TransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.TransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.TransactionBody}
 */
proto.pbtx.TransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setNetworkId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setActor(value);
        break;
      case 3:
        var values = /** @type {!Array<string>} */ (reader.isDelimited() ? reader.readPackedFixed64String() : [reader.readFixed64String()]);
        for (var i = 0; i < values.length; i++) {
          msg.addCosignors(values[i]);
        }
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setSeqnum(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setPrevHash(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setTransactionType(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTransactionContent(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.TransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.TransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.TransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.TransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkId();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
        1,
        f
    );
  }
  f = message.getActor();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
        2,
        f
    );
  }
  f = message.getCosignorsList();
  if (f.length > 0) {
    writer.writePackedFixed64String(
        3,
        f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeUint32(
        4,
        f
    );
  }
  f = message.getPrevHash();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
        5,
        f
    );
  }
  f = message.getTransactionType();
  if (f !== 0) {
    writer.writeUint32(
        6,
        f
    );
  }
  f = message.getTransactionContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
        7,
        f
    );
  }
};


/**
 * optional fixed64 network_id = 1;
 * @return {string}
 */
proto.pbtx.TransactionBody.prototype.getNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setNetworkId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional fixed64 actor = 2;
 * @return {string}
 */
proto.pbtx.TransactionBody.prototype.getActor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setActor = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated fixed64 cosignors = 3;
 * @return {!Array<string>}
 */
proto.pbtx.TransactionBody.prototype.getCosignorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setCosignorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.addCosignors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.clearCosignorsList = function() {
  return this.setCosignorsList([]);
};


/**
 * optional uint32 seqnum = 4;
 * @return {number}
 */
proto.pbtx.TransactionBody.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setSeqnum = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional fixed64 prev_hash = 5;
 * @return {string}
 */
proto.pbtx.TransactionBody.prototype.getPrevHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setPrevHash = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint32 transaction_type = 6;
 * @return {number}
 */
proto.pbtx.TransactionBody.prototype.getTransactionType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setTransactionType = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes transaction_content = 7;
 * @return {string}
 */
proto.pbtx.TransactionBody.prototype.getTransactionContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes transaction_content = 7;
 * This is a type-conversion wrapper around `getTransactionContent()`
 * @return {string}
 */
proto.pbtx.TransactionBody.prototype.getTransactionContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionContent()));
};


/**
 * optional bytes transaction_content = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionContent()`
 * @return {!Uint8Array}
 */
proto.pbtx.TransactionBody.prototype.getTransactionContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbtx.TransactionBody} returns this
 */
proto.pbtx.TransactionBody.prototype.setTransactionContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbtx.Transaction.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.Transaction.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.Transaction.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.Transaction} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.Transaction.toObject = function(includeInstance, msg) {
    var f, obj = {
      body: msg.getBody_asB64(),
      authoritiesList: jspb.Message.toObjectList(msg.getAuthoritiesList(),
          proto.pbtx.Authority.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.Transaction}
 */
proto.pbtx.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.Transaction;
  return proto.pbtx.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.Transaction}
 */
proto.pbtx.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBody(value);
        break;
      case 2:
        var value = new proto.pbtx.Authority;
        reader.readMessage(value,proto.pbtx.Authority.deserializeBinaryFromReader);
        msg.addAuthorities(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
        1,
        f
    );
  }
  f = message.getAuthoritiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
        2,
        f,
        proto.pbtx.Authority.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {string}
 */
proto.pbtx.Transaction.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.pbtx.Transaction.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.pbtx.Transaction.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbtx.Transaction} returns this
 */
proto.pbtx.Transaction.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Authority authorities = 2;
 * @return {!Array<!proto.pbtx.Authority>}
 */
proto.pbtx.Transaction.prototype.getAuthoritiesList = function() {
  return /** @type{!Array<!proto.pbtx.Authority>} */ (
      jspb.Message.getRepeatedWrapperField(this, proto.pbtx.Authority, 2));
};


/**
 * @param {!Array<!proto.pbtx.Authority>} value
 * @return {!proto.pbtx.Transaction} returns this
 */
proto.pbtx.Transaction.prototype.setAuthoritiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.pbtx.Authority=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pbtx.Authority}
 */
proto.pbtx.Transaction.prototype.addAuthorities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.pbtx.Authority, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbtx.Transaction} returns this
 */
proto.pbtx.Transaction.prototype.clearAuthoritiesList = function() {
  return this.setAuthoritiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbtx.Permission.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.Permission.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.Permission.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.Permission} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.Permission.toObject = function(includeInstance, msg) {
    var f, obj = {
      actor: jspb.Message.getFieldWithDefault(msg, 1, "0"),
      threshold: jspb.Message.getFieldWithDefault(msg, 2, 0),
      keysList: jspb.Message.toObjectList(msg.getKeysList(),
          proto.pbtx.KeyWeight.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.Permission}
 */
proto.pbtx.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.Permission;
  return proto.pbtx.Permission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.Permission}
 */
proto.pbtx.Permission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setActor(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setThreshold(value);
        break;
      case 3:
        var value = new proto.pbtx.KeyWeight;
        reader.readMessage(value,proto.pbtx.KeyWeight.deserializeBinaryFromReader);
        msg.addKeys(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.Permission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActor();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
        1,
        f
    );
  }
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
        2,
        f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
        3,
        f,
        proto.pbtx.KeyWeight.serializeBinaryToWriter
    );
  }
};


/**
 * optional fixed64 actor = 1;
 * @return {string}
 */
proto.pbtx.Permission.prototype.getActor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pbtx.Permission} returns this
 */
proto.pbtx.Permission.prototype.setActor = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional uint32 threshold = 2;
 * @return {number}
 */
proto.pbtx.Permission.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pbtx.Permission} returns this
 */
proto.pbtx.Permission.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated KeyWeight keys = 3;
 * @return {!Array<!proto.pbtx.KeyWeight>}
 */
proto.pbtx.Permission.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.pbtx.KeyWeight>} */ (
      jspb.Message.getRepeatedWrapperField(this, proto.pbtx.KeyWeight, 3));
};


/**
 * @param {!Array<!proto.pbtx.KeyWeight>} value
 * @return {!proto.pbtx.Permission} returns this
 */
proto.pbtx.Permission.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pbtx.KeyWeight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pbtx.KeyWeight}
 */
proto.pbtx.Permission.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pbtx.KeyWeight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbtx.Permission} returns this
 */
proto.pbtx.Permission.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.KeyWeight.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.KeyWeight.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.KeyWeight} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.KeyWeight.toObject = function(includeInstance, msg) {
    var f, obj = {
      key: (f = msg.getKey()) && proto.pbtx.PublicKey.toObject(includeInstance, f),
      weight: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.KeyWeight}
 */
proto.pbtx.KeyWeight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.KeyWeight;
  return proto.pbtx.KeyWeight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.KeyWeight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.KeyWeight}
 */
proto.pbtx.KeyWeight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.pbtx.PublicKey;
        reader.readMessage(value,proto.pbtx.PublicKey.deserializeBinaryFromReader);
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setWeight(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.KeyWeight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.KeyWeight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.KeyWeight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.KeyWeight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
        1,
        f,
        proto.pbtx.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeUint32(
        2,
        f
    );
  }
};


/**
 * optional PublicKey key = 1;
 * @return {?proto.pbtx.PublicKey}
 */
proto.pbtx.KeyWeight.prototype.getKey = function() {
  return /** @type{?proto.pbtx.PublicKey} */ (
      jspb.Message.getWrapperField(this, proto.pbtx.PublicKey, 1));
};


/**
 * @param {?proto.pbtx.PublicKey|undefined} value
 * @return {!proto.pbtx.KeyWeight} returns this
 */
proto.pbtx.KeyWeight.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pbtx.KeyWeight} returns this
 */
proto.pbtx.KeyWeight.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pbtx.KeyWeight.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.pbtx.KeyWeight.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pbtx.KeyWeight} returns this
 */
proto.pbtx.KeyWeight.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.PublicKey.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.PublicKey.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.PublicKey} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.PublicKey.toObject = function(includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      keyBytes: msg.getKeyBytes_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.PublicKey}
 */
proto.pbtx.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.PublicKey;
  return proto.pbtx.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.PublicKey}
 */
proto.pbtx.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.pbtx.KeyType} */ (reader.readEnum());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setKeyBytes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
        1,
        f
    );
  }
  f = message.getKeyBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
        2,
        f
    );
  }
};


/**
 * optional KeyType type = 1;
 * @return {!proto.pbtx.KeyType}
 */
proto.pbtx.PublicKey.prototype.getType = function() {
  return /** @type {!proto.pbtx.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pbtx.KeyType} value
 * @return {!proto.pbtx.PublicKey} returns this
 */
proto.pbtx.PublicKey.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes key_bytes = 2;
 * @return {string}
 */
proto.pbtx.PublicKey.prototype.getKeyBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key_bytes = 2;
 * This is a type-conversion wrapper around `getKeyBytes()`
 * @return {string}
 */
proto.pbtx.PublicKey.prototype.getKeyBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyBytes()));
};


/**
 * optional bytes key_bytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyBytes()`
 * @return {!Uint8Array}
 */
proto.pbtx.PublicKey.prototype.getKeyBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbtx.PublicKey} returns this
 */
proto.pbtx.PublicKey.prototype.setKeyBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pbtx.Authority.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.Authority.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.Authority.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.Authority} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.Authority.toObject = function(includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, 0),
      sigsList: msg.getSigsList_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.Authority}
 */
proto.pbtx.Authority.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.Authority;
  return proto.pbtx.Authority.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.Authority} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.Authority}
 */
proto.pbtx.Authority.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.pbtx.KeyType} */ (reader.readEnum());
        msg.setType(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addSigs(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.Authority.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.Authority.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.Authority} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.Authority.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
        1,
        f
    );
  }
  f = message.getSigsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
        2,
        f
    );
  }
};


/**
 * optional KeyType type = 1;
 * @return {!proto.pbtx.KeyType}
 */
proto.pbtx.Authority.prototype.getType = function() {
  return /** @type {!proto.pbtx.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pbtx.KeyType} value
 * @return {!proto.pbtx.Authority} returns this
 */
proto.pbtx.Authority.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated bytes sigs = 2;
 * @return {!Array<string>}
 */
proto.pbtx.Authority.prototype.getSigsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes sigs = 2;
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<string>}
 */
proto.pbtx.Authority.prototype.getSigsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSigsList()));
};


/**
 * repeated bytes sigs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.pbtx.Authority.prototype.getSigsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSigsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.pbtx.Authority} returns this
 */
proto.pbtx.Authority.prototype.setSigsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.pbtx.Authority} returns this
 */
proto.pbtx.Authority.prototype.addSigs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pbtx.Authority} returns this
 */
proto.pbtx.Authority.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.pbtx.TransactionHistoryEntry.prototype.toObject = function(opt_includeInstance) {
    return proto.pbtx.TransactionHistoryEntry.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.pbtx.TransactionHistoryEntry} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.pbtx.TransactionHistoryEntry.toObject = function(includeInstance, msg) {
    var f, obj = {
      transaction: msg.getTransaction_asB64(),
      backendTimestamp: jspb.Message.getFieldWithDefault(msg, 2, "0"),
      backendTrxid: msg.getBackendTrxid_asB64()
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pbtx.TransactionHistoryEntry}
 */
proto.pbtx.TransactionHistoryEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pbtx.TransactionHistoryEntry;
  return proto.pbtx.TransactionHistoryEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pbtx.TransactionHistoryEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pbtx.TransactionHistoryEntry}
 */
proto.pbtx.TransactionHistoryEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setTransaction(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readFixed64String());
        msg.setBackendTimestamp(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setBackendTrxid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pbtx.TransactionHistoryEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pbtx.TransactionHistoryEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pbtx.TransactionHistoryEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pbtx.TransactionHistoryEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
        1,
        f
    );
  }
  f = message.getBackendTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeFixed64String(
        2,
        f
    );
  }
  f = message.getBackendTrxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
        3,
        f
    );
  }
};


/**
 * optional bytes transaction = 1;
 * @return {string}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbtx.TransactionHistoryEntry} returns this
 */
proto.pbtx.TransactionHistoryEntry.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional fixed64 backend_timestamp = 2;
 * @return {string}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getBackendTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.pbtx.TransactionHistoryEntry} returns this
 */
proto.pbtx.TransactionHistoryEntry.prototype.setBackendTimestamp = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional bytes backend_trxid = 3;
 * @return {string}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getBackendTrxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes backend_trxid = 3;
 * This is a type-conversion wrapper around `getBackendTrxid()`
 * @return {string}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getBackendTrxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBackendTrxid()));
};


/**
 * optional bytes backend_trxid = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBackendTrxid()`
 * @return {!Uint8Array}
 */
proto.pbtx.TransactionHistoryEntry.prototype.getBackendTrxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBackendTrxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pbtx.TransactionHistoryEntry} returns this
 */
proto.pbtx.TransactionHistoryEntry.prototype.setBackendTrxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.pbtx.KeyType = {
  EOSIO_KEY: 0
};

goog.object.extend(exports, proto.pbtx);
